#!/usr/bin/env perl

=head1 NAME

C<App::PickLE> - An electronic component pick list application.

=cut

package App::PickLE;

use strict;
use warnings;
use autodie;
use utf8;
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(gnu_getopt);

# Include the project module directory.
use FindBin;
use File::Spec;
use lib File::Spec->catdir($FindBin::Bin, '..', 'lib');

use PickLE::Document;
use PickLE::Converter::EagleBOM;

=head1 METHODS

=over 4

=item main

Program's main entry point.

=cut

sub main {
	# Enable UTF-8 output.
	binmode STDOUT, ":encoding(utf8)";

	# Some global-ish variables.
	my $document = undef;

	# Variables for the command-line arguments.
	my $arg_import = undef;
	my $arg_export = undef;

	# Get the command-line options.
	GetOptions(
		'import|i=s' => \$arg_import,
		'export|x=s' => \$arg_export,
	) or die "No arguments were supplied.";
	my $ARGC = scalar @ARGV;

	# Are we importing some file?
	if (defined $arg_import) {
		# We are importing...
		if ($ARGC == 0) {
			die "Wrong number of arguments supplied to import.\n";
		}

		my $inputfile = shift @ARGV;
		if (lc($arg_import) eq 'eagle') {
			# Eagle CAD.
			my $bom = PickLE::Converter::EagleBOM->load($inputfile);
			$document = $bom->document;
		} else {
			# Unknown type to import.
			die "Unknown type of file to be imported.\n";
		}
	}

	# Load a pick list document.
	$ARGC = scalar @ARGV;
	if (not defined $document) {
		if ($ARGC == 0) {
			die "Wrong number of arguments supplied to read document.\n";
		}

		# Read the pick list file.
		my $inputfile = pop @ARGV;
		$document = PickLE::Document->load($inputfile);
	}

	# Are we supposed to be exporting something?
	if (defined $arg_export) {
		if (not defined $document) {
			die "A document must be loaded in order to be exported.\n";
		}

		# Export document.
		$document->save($arg_export);
		return 0;
	}

	# If there's nothing left to do, let's just print the document contents.
	print_document($document);
	return 0;
}

=item print_document(I<$document>)

Prints the contents of a L<PickLE::Document> in a pretty way.

=cut

sub print_document {
	my ($document) = @_;

	# Go through categories listing the components in them.
	$document->foreach_category(sub {
		my $category = shift;
		print "$category:\n";

		$document->foreach_component({ category => $category }, sub {
			my $component = shift;

			# TODO: Make this output like tree.
			print '  ';
			print (($component->picked) ? "\x{2611}" : "\x{2610}");
			print ' ' . $component->quantity . "\t";
			print $component->value . "\t" if defined $component->value;
			print $component->name . "\t";
			print $component->description if defined $component->description;
			print "\n";
		});

		print "\n";
	});
}

# Start the program.
main();

=back

=head1 AUTHOR

Nathan Campos <nathan@innoveworkshop.com>

=head1 COPYRIGHT

Copyright (c) 2022- Nathan Campos.

=cut
