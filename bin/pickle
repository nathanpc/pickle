#!/usr/bin/env perl

=head1 NAME

C<App::PickLE> - An electronic component pick list application.

=cut

package App::PickLE;

use strict;
use warnings;
use autodie;
use utf8;
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(gnu_getopt);

# Include the project module directory.
use FindBin;
use File::Spec;
use lib File::Spec->catdir($FindBin::Bin, '..', 'lib');

use PickLE::Document;
use PickLE::Converter::EagleBOM;

=head1 METHODS

=over 4

=item main

Program's main entry point.

=cut

sub main {
	# Enable UTF-8 output.
	binmode STDOUT, ":encoding(utf8)";

	# Variables for the command-line arguments.
	my $arg_convert = undef;

	# Get the command-line options.
	GetOptions(
		'convert|c=s', \$arg_convert
	) or die "No arguments were supplied.";
	my $ARGC = scalar @ARGV;

	# Decide what to do with our arguments.
	if (defined $arg_convert) {
		# We are converting...
		if (($ARGC > 2) or ($ARGC == 0)) {
			die "Wrong number of arguments supplied to convert.\n";
		}

		my $inputfile = shift @ARGV;
		my $outputfile = shift @ARGV;

		if (lc($arg_convert) eq 'eagle') {
			my $bom = PickLE::Converter::EagleBOM->load($inputfile);

			# User just wants to print it out.
			if (not defined $outputfile) {
				print_document($bom->document);
				return 0;
			}

			# Export converted BOM.
			$bom->document->save($outputfile);
			return 0;
		} else {
			# Unknown type to convert.
			die "Unknown type of conversion to perform.\n";
		}
	}

	# Load a pick list document and print it.
	my $doc = PickLE::Document->load($ARGV[0]);
	print_document($doc);

	return 0;
}

=item print_document(I<$document>)

Prints the contents of a L<PickLE::Document> in a pretty way.

=cut

sub print_document {
	my ($document) = @_;

	# Go through categories listing the components in them.
	$document->foreach_category(sub {
		my $category = shift;
		print "$category:\n";

		$document->foreach_component({ category => $category }, sub {
			my $component = shift;

			# TODO: Make this output like tree.
			print '  ';
			print (($component->picked) ? "\x{2611}" : "\x{2610}");
			print ' ' . $component->quantity . "\t";
			print $component->value . "\t" if defined $component->value;
			print $component->name . "\t";
			print $component->description if defined $component->description;
			print "\n";
		});

		print "\n";
	});
}

# Start the program.
main();

=back

=head1 AUTHOR

Nathan Campos <nathan@innoveworkshop.com>

=head1 COPYRIGHT

Copyright (c) 2022- Nathan Campos.

=cut
